from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from aiogram.filters import Command
import asyncio

# üîê –¢–æ–∫–µ–Ω –±–æ—Ç–∞
import os
TOKEN = os.getenv("TOKEN")

# üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ —É–ø–æ–º–∏–Ω–∞—Ç—å –∏ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç "–æ—Ç–∫—Ä—ã–≤–∞—Ç—å"
GATE_RESPONDERS = ["MadiyarYntykbay", "Tinbrawl", ]
OPEN_RESPONDERS = ["teemudzhinn", "Garmaevvlad", "danayergali"]

bot = Bot(token=TOKEN)
dp = Dispatcher()


# üì• –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤–æ—Ä–æ—Ç (–ê–π—Ç–∏–µ–≤–∞)
@dp.message(Command("gate"))
async def request_gate(message: Message):
    requester = message.from_user.username or message.from_user.full_name
    gate_location = "—Å –ê–π—Ç–∏–µ–≤–∞"
    tagged_users = " ".join([f"@{u}" for u in GATE_RESPONDERS])

    await message.delete()
    
    text = (
        f"üîê –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤–æ—Ä–æ—Ç {gate_location} –æ—Ç @{requester}.\n\n"
        f"{tagged_users}\n\n"
        
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –ù–µ –û—Ç–∫—Ä—ã—Ç–æ", callback_data="gate_opened")]
    ])

    await message.answer(text, reply_markup=keyboard)


# üì• –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —à–ª–∞–≥–±–∞—É–º–∞
@dp.message(Command("open"))
async def request_barrier(message: Message):
    requester = message.from_user.username or message.from_user.full_name
    tagged_users = " ".join([f"@{u}" for u in OPEN_RESPONDERS])

    await message.delete()
    
    text = (
        f"üõ° –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —à–ª–∞–≥–±–∞—É–º–∞ –æ—Ç @{requester}.\n\n"
        f"{tagged_users}\n\n"
        
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –ù–µ –û—Ç–∫—Ä—ã—Ç–æ", callback_data="barrier_opened")]
    ])

    await message.answer(text, reply_markup=keyboard)


# üü¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫—Ä—ã—Ç–æ" ‚Äî –¥–ª—è –≤–æ—Ä–æ—Ç
@dp.callback_query(lambda c: c.data == "gate_opened")
async def handle_gate_opened(callback: types.CallbackQuery):
    opener = callback.from_user.username or callback.from_user.full_name
    if opener not in GATE_RESPONDERS:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –≤–æ—Ä–æ—Ç–∞", show_alert=True)
        return

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∫–Ω–æ–ø–∫–µ, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
    new_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"‚úÖ –û—Ç–∫—Ä—ã–ª @{opener}", callback_data="noop")]
    ])
    await callback.message.edit_reply_markup(reply_markup=new_keyboard)
    await callback.answer("–ì–æ—Ç–æ–≤–æ!")


# üü¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫—Ä—ã—Ç–æ" ‚Äî –¥–ª—è —à–ª–∞–≥–±–∞—É–º–∞
@dp.callback_query(lambda c: c.data == "barrier_opened")
async def handle_barrier_opened(callback: types.CallbackQuery):
    opener = callback.from_user.username or callback.from_user.full_name
    if opener not in OPEN_RESPONDERS:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —à–ª–∞–≥–±–∞—É–º", show_alert=True)
        return

    new_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"‚úÖ –û—Ç–∫—Ä—ã–ª @{opener}", callback_data="noop")]
    ])
    await callback.message.edit_reply_markup(reply_markup=new_keyboard)
    await callback.answer("–ì–æ—Ç–æ–≤–æ!")


# üîí –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –Ω–∞–∂–∞—Ç–∏–µ (—á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–ª–∞)
@dp.callback_query(lambda c: c.data == "noop")
async def noop(callback: types.CallbackQuery):
    await callback.answer("–£–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ ‚úÖ", show_alert=True)


# üìã –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="open", description="üõ° –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —à–ª–∞–≥–±–∞—É–º–∞"),
        BotCommand(command="gate", description="üö™ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤–æ—Ä–æ—Ç —Å –ê–π—Ç–∏–µ–≤–∞"),
    ]
    await bot.set_my_commands(commands)


# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await set_commands(bot)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
